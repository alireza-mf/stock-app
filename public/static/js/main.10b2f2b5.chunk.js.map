{"version":3,"sources":["components/LineChart.js","components/CandleStickChart.js","components/StockCharts.js","components/SymbolSearch.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","TimeSeries","elRef","useRef","window","scrollTo","behavior","block","top","current","offsetTop","useScroll","executeScroll","useEffect","x","_","map","Dates","y","Close","series","data","zip","v","console","log","type","options","chart","height","zoom","enabled","autoScaleYaxis","toolbar","autoSelected","markers","size","title","text","align","yaxis","tooltip","shared","ref","CandleStickChart","Open","High","Low","STOCK_QUERY","gql","StockCharts","selected_symbol","useState","typeOfChart","setTypeOfChart","useQuery","variables","loading","error","className","style","maxWidth","marginTop","role","width","aria-valuenow","aria-valuemin","aria-valuemax","padding","value","label","onChange","defaultInputValue","StockDetail","displayTheRightChart","SYMBOL_QUERY","SymbolList","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","filter","d","symbol","slice","getSuggestionValue","suggestion","renderSuggestion","name","SymbolSearch","props","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","showChart","selected","e","this","inputProps","placeholder","disabledinputProps","disabled","query","marginBottom","onClick","handleClick","bind","Component","client","ApolloClient","uri","App","href","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.10b2f2b5.chunk.js","sourcesContent":["import React,{Fragment, useEffect, useRef} from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport _ from 'lodash';\r\n\r\nconst useScroll = () => {\r\n  const elRef = useRef(null)\r\n  const executeScroll = () => window.scrollTo({\r\n    behavior: \"smooth\",\r\n    block: 'start',\r\n    top: elRef.current.offsetTop\r\n  })\r\n\r\n  return [executeScroll, elRef]\r\n}\r\n\r\n\r\nconst LineChart = ({TimeSeries}) => {\r\n    const [executeScroll, elRef] = useScroll()\r\n    useEffect(executeScroll, []) // Runs after component mounts\r\n\r\n    // apexchart needs a specific data stracture so:\r\n    const x = _.map(TimeSeries.Dates, 'Date');\r\n    \r\n    const pre_y = _.map(TimeSeries.Dates, 'Value');\r\n    const y = pre_y.map( ({Close}) => [Close] );\r\n\r\n    const pre_data = _.zip(x,y);\r\n    const data = pre_data.map(function(v){\r\n        return{\r\n            x: v[0],\r\n            y: v[1]\r\n        }\r\n    });\r\n    const series=[{data}];\r\n\r\n    console.log(series);\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactApexChart\r\n                series ={series}\r\n                type='line'\r\n                options ={{\r\n                    chart: {\r\n                      height: 350,\r\n                      zoom: {\r\n                        type: 'x',\r\n                        enabled: true,\r\n                        autoScaleYaxis: true\r\n                      },\r\n                      toolbar: {\r\n                        autoSelected: 'zoom'\r\n                      }\r\n                    },\r\n                    markers: {\r\n                      size: 0,\r\n                    },\r\n                    title: {\r\n                      text: 'Stock Price Daily Movement',\r\n                      align: 'left'\r\n                    },\r\n                    yaxis: {\r\n                      title: {\r\n                        text: 'Price'\r\n                      },\r\n                    },\r\n                    tooltip: {\r\n                      shared: false,\r\n                      \r\n                    }\r\n                  }\r\n                }\r\n            />\r\n            <div ref={elRef}></div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default LineChart;","import React,{Fragment, useEffect, useRef} from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport _ from 'lodash';\r\n\r\nconst useScroll = () => {\r\n  const elRef = useRef(null)\r\n  const executeScroll = () => window.scrollTo({\r\n    behavior: \"smooth\",\r\n    top: elRef.current.offsetTop\r\n  })\r\n\r\n  return [executeScroll, elRef]\r\n}\r\n\r\n\r\nconst CandleStickChart = ({TimeSeries}) => {\r\n    const [executeScroll, elRef] = useScroll()\r\n    useEffect(executeScroll, []) // Runs after component mounts\r\n\r\n    // apexchart needs a specific data stracture so:\r\n    const x = _.map(TimeSeries.Dates, 'Date');\r\n    \r\n    const pre_y = _.map(TimeSeries.Dates, 'Value');\r\n    const y = pre_y.map( ({Open,High,Low,Close}) => [Open,High,Low,Close] );\r\n\r\n    const pre_data = _.zip(x,y);\r\n    const data = pre_data.map(function(v){\r\n        return{\r\n            x: v[0],\r\n            y: v[1]\r\n        }\r\n    });\r\n    const series=[{data}];\r\n\r\n    console.log(series);\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactApexChart\r\n                series={series}\r\n                type='candlestick'\r\n                options={{\r\n                    chart: {\r\n                      type: 'candlestick',\r\n                      height: 350\r\n                    },\r\n                    title: {\r\n                      text: 'CandleStick Daily Chart',\r\n                      align: 'left'\r\n                    },\r\n                    yaxis: {\r\n                      tooltip: {\r\n                        enabled: true\r\n                      },\r\n                      title: {\r\n                        text: 'Price'\r\n                      },\r\n                    }\r\n                  }}\r\n                height={350}\r\n            />\r\n            <div ref={elRef}></div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CandleStickChart;","import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from 'react-apollo';\r\nimport Select from 'react-select';\r\nimport LineChart from \"./LineChart\";\r\nimport CandleStickChart from \"./CandleStickChart\";\r\n\r\n\r\nconst STOCK_QUERY = gql`\r\n  query StockQuery($selected_symbol: String!) {\r\n    StockDetail(selected_symbol: $selected_symbol){\r\n      MetaData{\r\n        Information\r\n        Symbol\r\n        LastRefreshed\r\n        OutputSize\r\n        TimeZone\r\n      }\r\n      TimeSeries{\r\n        Dates{\r\n          Date\r\n          Value{\r\n            Open\r\n            High\r\n            Low\r\n            Close\r\n          }\r\n        }\r\n      }\r\n    }\r\n      \r\n  }\r\n`;\r\n\r\nconst StockCharts = ({selected_symbol}) => {\r\n  const [typeOfChart,setTypeOfChart] = useState('');\r\n\r\n  const {loading, error, data} = useQuery(STOCK_QUERY, { variables:{selected_symbol} });\r\n  if(loading) return (\r\n    <div className=\"card border-primary mb-3 mx-auto\" style={{maxWidth:\"40rem\", marginTop:\"20px\"}} >\r\n      <div className=\"card-header\">\r\n        <h3>Loading Charts . . .</h3>\r\n      </div>\r\n      <div className=\"card-body text-center\">\r\n        <div className=\"progress mx-auto\" style={{maxWidth:\"25rem\", marginTop:\"10px\"}}>\r\n          <div className=\"progress-bar progress-bar-striped bg-info progress-bar-animated\" role=\"progressbar\" style={{width:\"100%\"}} aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\r\n        </div>\r\n      </div>\r\n    </div>);\r\n  if(error) return (<div className=\"card text-white bg-primary mb-3 mx-auto\" style={{maxWidth:\"40rem\", marginTop:\"20px\", padding:\"15px\"}}><h3 className=\"text-center\">Ivalid Stock Symbol</h3></div>);\r\n\r\n  \r\n\r\n\r\n  const displayTheRightChart = () => {\r\n      switch (typeOfChart.value) {\r\n          case 'line':\r\n              return (<LineChart\r\n                TimeSeries={data.StockDetail.TimeSeries}\r\n              />);\r\n          case 'candlestick':\r\n              return (<CandleStickChart\r\n                TimeSeries={data.StockDetail.TimeSeries}\r\n              />);\r\n          default:\r\n              return (<LineChart\r\n                TimeSeries={data.StockDetail.TimeSeries}\r\n              />);\r\n      }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card border-primary mb-3 mx-auto\" style={{maxWidth:\"40rem\", marginTop:\"30px\"}} >\r\n        <div className=\"card-header\">\r\n          <h3>Stock Chart</h3>\r\n        </div>\r\n        <div className=\"card-body text-center\">\r\n          <div>\r\n            <h4>Type of Chart: </h4>\r\n              <Select\r\n                options={[\r\n                  { value:'line', label:'Line' },\r\n                  { value:'candlestick', label:'CandleStick' },\r\n                ]}\r\n                value={typeOfChart}\r\n                onChange={setTypeOfChart}\r\n                defaultInputValue='Line'\r\n              />\r\n          </div>\r\n          <div>\r\n            {displayTheRightChart()}\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockCharts;","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport Autosuggest from 'react-autosuggest'\r\nimport StockCharts from './StockCharts';\r\n\r\nconst SYMBOL_QUERY = gql`\r\n  query SymbolQuery {\r\n    SymbolList{ \r\n    \tsymbol\r\n    \tname\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nlet SymbolList= [];\r\n\r\nconst getSuggestions = value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0 ? [] : SymbolList.filter(d =>\r\n    d.symbol.toLowerCase().slice(0, inputLength) === inputValue\r\n  ).slice(0,10);\r\n};\r\n\r\nconst getSuggestionValue = suggestion => suggestion.symbol;\r\n\r\nconst renderSuggestion = suggestion => (\r\n  <div>\r\n    <strong>{suggestion.symbol}</strong>{' - '}<small>{suggestion.name}</small>\r\n  </div>\r\n);\r\n\r\n\r\nexport class SymbolSearch extends Component {\r\n  constructor(props){\r\n    super()\r\n    this.state ={\r\n      value: '',\r\n      suggestions: [],\r\n      showChart: false,\r\n      selected: ''\r\n    }\r\n  }\r\n\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: getSuggestions(value)\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  handleClick(e){\r\n    this.setState({selected: this.state.value});\r\n    this.setState({showChart: true});\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions, showChart, selected } = this.state;\r\n\r\n    const inputProps = {\r\n      placeholder: 'Type Stock Symbol',\r\n      value,\r\n      onChange: this.onChange,\r\n    };\r\n    const disabledinputProps = {\r\n      placeholder: 'Loading Symbols . . .',\r\n      value,\r\n      onChange: this.onChange,\r\n      disabled: true\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"card border-primary mb-3 mx-auto\" style={{maxWidth:\"40rem\", marginTop:\"30px\"}} >\r\n        <div className=\"card-header\">\r\n          <h3>Select company</h3>\r\n        </div>\r\n        <div className=\"card-body text-center\">\r\n        \r\n        <Query query={SYMBOL_QUERY}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) \r\n              return (\r\n                <Fragment>\r\n                  <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={disabledinputProps}\r\n                  />\r\n                  <div className=\"progress mx-auto\" style={{maxWidth:\"15rem\", marginTop:\"10px\",marginBottom:\"15px\"}}>\r\n                    <div className=\"progress-bar progress-bar-striped bg-info progress-bar-animated\" role=\"progressbar\" style={{width:\"100%\"}} aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\r\n                  </div>\r\n                  <h5>Loading . . .</h5>\r\n                  <button type=\"button\" disabled={!value} className=\"btn btn-outline-info\" onClick={this.handleClick.bind(this)} style={{marginTop:\"20px\"}}>Show Informations</button>\r\n                </Fragment>\r\n              );\r\n            if (error)\r\n              return (\r\n                <Fragment>\r\n                  <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                  />\r\n                  <button type=\"button\" disabled={!value} className=\"btn btn-outline-info\" onClick={this.handleClick.bind(this)} style={{marginTop:\"40px\"}}>Show Informations</button>\r\n              </Fragment>\r\n              );\r\n            \r\n            SymbolList= data.SymbolList.slice();\r\n            return (\r\n              <Fragment>\r\n                  <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                  />\r\n                  <button type=\"button\" disabled={!value} className=\"btn btn-outline-info\" onClick={this.handleClick.bind(this)} style={{marginTop:\"40px\"}}>Show Informations</button>\r\n              </Fragment>\r\n            );\r\n          }}\r\n        </Query>\r\n        </div>\r\n        </div>\r\n        {showChart ? <StockCharts selected_symbol={selected}/> : null}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SymbolSearch;","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport SymbolSearch from './components/SymbolSearch';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <h4><a className=\"navbar-brand\"href=\"/\">Stock Chart App</a></h4>\n          </nav>\n          <div className=\"container\">\n            <Route exact path=\"/\" component={SymbolSearch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}